// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Js_null = require("bs-platform/lib/js/js_null.js");
var Child_process = require("child_process");

function waitForPrompt($$process, promptLine) {
  return new Promise((function (resolve, param) {
                  var np = $$process.nodeProcess;
                  var so = Js_null.getExn(np.stdout);
                  var handleStdout = function (b) {
                    var s = b.toString();
                    var lines = "\n".split(s);
                    if (lines.includes(promptLine)) {
                      so.off("data", handleStdout);
                      return resolve("-");
                    } else {
                      return /* () */0;
                    }
                  };
                  so.on("data", handleStdout);
                  return /* () */0;
                })).then((function (param) {
                return Promise.resolve(/* () */0);
              }));
}

function printStreamsDebug(p) {
  var np = p.nodeProcess;
  var so = Js_null.getExn(np.stdout);
  var se = Js_null.getExn(np.stderr);
  so.on("data", (function (b) {
          var s = b.toString();
          console.log(Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "STDOUT: ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ]),
                        "STDOUT: %s"
                      ]), s));
          return /* () */0;
        }));
  se.on("data", (function (b) {
          var s = b.toString();
          console.log(Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "STDERR: ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ]),
                        "STDERR: %s"
                      ]), s));
          return /* () */0;
        }));
  return /* () */0;
}

function start(opts) {
  var handleCloseDuringStart = function (code) {
    if (code === 3) {
      throw Js_exn.raiseError("imandra-repl requires login. Start imandra-repl manually to login.");
    } else {
      return 0;
    }
  };
  return new Promise((function (resolve, param) {
                var np = Child_process.spawn("imandra-repl-dev", /* :: */[
                      "-require",
                      /* :: */[
                        "cohttp.lwt",
                        /* [] */0
                      ]
                    ]);
                var ip = {
                  nodeProcess: np
                };
                np.on("close", handleCloseDuringStart);
                if (opts.debug) {
                  printStreamsDebug(ip);
                }
                waitForPrompt(ip, "# ").then((function (param) {
                        np.off("close", handleCloseDuringStart);
                        resolve(ip);
                        return Promise.resolve(/* () */0);
                      }));
                return /* () */0;
              }));
}

exports.waitForPrompt = waitForPrompt;
exports.start = start;
/* child_process Not a pure module */
