// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Js_null = require("bs-platform/lib/js/js_null.js");
var Child_process = require("child_process");

function waitForPrompt($$process, promptLine) {
  return new Promise((function (resolve, param) {
                var np = $$process.nodeProcess;
                var so = Js_null.getExn(np.stdout);
                var handleStdout = function (b) {
                  var s = b.toString();
                  var lines = s.split("\n");
                  if (lines.includes(promptLine)) {
                    so.off("data", handleStdout);
                    return resolve(undefined);
                  } else {
                    return /* () */0;
                  }
                };
                so.on("data", handleStdout);
                return /* () */0;
              }));
}

function printStreamsDebug(p) {
  var np = p.nodeProcess;
  var so = Js_null.getExn(np.stdout);
  var se = Js_null.getExn(np.stderr);
  so.on("data", (function (b) {
          var s = b.toString();
          console.log(Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "STDOUT: ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ]),
                        "STDOUT: %s"
                      ]), s));
          return /* () */0;
        }));
  se.on("data", (function (b) {
          var s = b.toString();
          console.log(Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "STDERR: ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ]),
                        "STDERR: %s"
                      ]), s));
          return /* () */0;
        }));
  return /* () */0;
}

function start(opts) {
  var makeHandleCloseDuringStart = function (p) {
    var np = p.nodeProcess;
    var se = Js_null.getExn(np.stderr);
    var seText = /* record */[/* contents */""];
    se.on("data", (function (b) {
            var s = b.toString();
            seText[0] = s.concat(seText[0]);
            return /* () */0;
          }));
    return (function (code) {
        console.error(seText[0]);
        throw Js_exn.raiseError(Curry._1(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "Imandra process exited during startup (code: ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* String_literal */Block.__(11, [
                                      ").",
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "Imandra process exited during startup (code: %d)."
                        ]), code));
      });
  };
  return new Promise((function (resolve, param) {
                var np = Child_process.spawn("imandra-repl-dev", /* array */[
                      "--non-interactive",
                      "-raw",
                      "-require",
                      "cohttp.lwt"
                    ]);
                var ip = {
                  nodeProcess: np
                };
                var handleCloseDuringStart = makeHandleCloseDuringStart(ip);
                np.on("close", handleCloseDuringStart);
                if (opts.debug) {
                  printStreamsDebug(ip);
                }
                waitForPrompt(ip, "# ").then((function (param) {
                        np.off("close", handleCloseDuringStart);
                        resolve(ip);
                        return Promise.resolve(undefined);
                      }));
                return /* () */0;
              }));
}

exports.waitForPrompt = waitForPrompt;
exports.start = start;
/* child_process Not a pure module */
